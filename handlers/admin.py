# admin.py

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from reg_bot import dp, bot
from data_base import sqlite_db
from keyboards import admin_kb

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FSMAdmin(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
async def verification(message: types.Message):
	if message.from_user.id == 1142268145:
		await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üëá", reply_markup = admin_kb.buttons)


# –ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cm_start(message: types.Message):
	if message.from_user.id == 1142268145:
		await FSMAdmin.photo.set()
		await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æüì∑", reply_markup = admin_kb.button_cancel)


# –û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cancel_handler(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	
	if current_state is None:
		return None
	
	await state.finish()
	await message.answer("–û–ö", reply_markup = admin_kb.buttons)


# –ì—Ä—É–∑–∏–º id —Ñ–æ—Ç–æ –≤ —Å–ª–æ–≤–∞—Ä—å
async def load_photo(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["photo"] = message.photo[0].file_id

	await FSMAdmin.next()
	await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")


# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã
async def get_name(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["name"] = message.text

	await FSMAdmin.next()
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")


# –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã
async def get_description(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["description"] = message.text

	await FSMAdmin.next()
	await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")


# –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–∏—Ü—Ü—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def get_price(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data["price"] = int(message.text)

	await sqlite_db.sql_add_command(state)
	await state.finish()
	await message.answer("–í –º–µ–Ω—é –Ω–æ–≤–∞—è –ø–∏—Ü—Ü–∞üçï", reply_markup = admin_kb.buttons)


# –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda x: x.data and x.data.startswith("del "))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete(callback_query.data.replace("del ", ""))	
	await callback_query.answer("–ü–∏—Ü—Ü–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–µ–Ω—é", show_alert = True)
	await bot.delete_message(chat_id = callback_query.from_user.id, message_id = callback_query.message.message_id)


# –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ü—Ü—ã –∏–∑ –º–µ–Ω—é
async def delete_pizza(message: types.Message):
	if message.from_user.id == 1142268145:
		data = await sqlite_db.sql_read_admin()
		for ret in data:
			await bot.send_photo(message.from_user.id, ret[0], f"{ret[1]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n\n–¶–µ–Ω–∞: ‚ÇΩ{ret[3]}",
					reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data = f"del {ret[1]}")))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
def register_handlers_admin(dp: Dispatcher):
	dp.register_message_handler(verification, commands = ["admin"])
	dp.register_message_handler(cm_start, Text("üü¢ –î–æ–±–∞–≤–∏—Ç—åüçï", ignore_case = True), state = None)
	dp.register_message_handler(cancel_handler, Text("–û—Ç–º–µ–Ω–∞", ignore_case = True), state = "*")
	dp.register_message_handler(load_photo, content_types = ["photo"], state = FSMAdmin.photo)
	dp.register_message_handler(get_name, state = FSMAdmin.name)
	dp.register_message_handler(get_description, state = FSMAdmin.description)
	dp.register_message_handler(get_price, state = FSMAdmin.price)	
	dp.register_message_handler(delete_pizza, Text("üî¥ –£–¥–∞–ª–∏—Ç—åüçï", ignore_case = True))
